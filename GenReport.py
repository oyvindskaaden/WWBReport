#!/usr/bin/env python3
"""
    Module to read a WWB Report CSV
"""

import argparse
from pprint import pprint
from WWBLexer.WWBLexer import WWBLexer
import json
import pandas as pd

from datetime import datetime


wwb_lexer = WWBLexer()

parser = argparse.ArgumentParser(
                    prog = 'WWB Report generator',
                    description = 'Reads the CSV generated by WWB and outputs a file based on a template')

parser.add_argument('filenames', type=str, nargs='+',
                    help='Files to be scanned and generated')

def to_markdown(wwb_tree: dict) -> str:

    markdown_output = f"""# {wwb_tree["show_name"]}
---

> Created on: {datetime.fromisoformat(wwb_tree["created"]).strftime("%d %b %Y at %H:%M:%S")}

> Created on version: {wwb_tree["wwb_version"]}

## Venue Information

{pd.DataFrame(wwb_tree["contact_info_show"]).to_markdown(index=False)}

## Customer Information

{pd.DataFrame(wwb_tree["contact_info_customer"]).to_markdown(index=False)}

## {wwb_tree["type"]}
    """
# RF Zones
    for zone in wwb_tree["zones"]:
        markdown_output += f"""
### RF Zone: {zone}
"""
        for type in wwb_tree["zones"][zone]:
            markdown_output += f"""
#### {type.capitalize()} channels ({str(wwb_tree["zones"][zone][type]["no_" + type])})
"""

            for group in wwb_tree["zones"][zone][type]:
                if group in "header" or group.startswith("no_"):
                    continue
                markdown_output += f"""
##### {group}

{pd.DataFrame(wwb_tree["zones"][zone][type][group]).to_markdown(index=False)}
"""

# Frequency Coordination Parameters
    markdown_output += """
## Frequency Coordination Parameters
"""
    for param in wwb_tree["parameters"]:
        markdown_output += f"""
### {param.capitalize()} 
"""

        for list in wwb_tree["parameters"][param]:
            if list.endswith("_name") or list.startswith("no_"):
                continue

            markdown_output += f"""
#### {list.replace("_", " ").capitalize()}"""

            if (param == "inclusions"):
                markdown_output += " - " + wwb_tree["parameters"][param][list + "_name"]
            elif (param == "exclusions"):
                markdown_output += f""" ({wwb_tree["parameters"][param]["no_" + list]})"""
            markdown_output += f"""\n
{pd.DataFrame(wwb_tree["parameters"][param][list]).to_markdown(index=False)}
"""

    return markdown_output


def main():
    args = parser.parse_args()

    for file in args.filenames:
        #print(f"Reading file: {file}")

        with open(file, "r") as file: 
            report_str: str = file.read()#.replace(", ", ";")
            #print(report_str)

            #lexed_file = wwb_lexer.get_tokens_unprocessed(report_str)

            
            tree = wwb_lexer.get_wwb_tree(report_str, True)#wwb_lexer.wwb_tree
            print(wwb_lexer)
            #print(to_markdown(tree))
            #print(tree)
            #pprint(tree)
            #print(json.dumps(tree, indent=4))



if __name__ == '__main__':
    main()



